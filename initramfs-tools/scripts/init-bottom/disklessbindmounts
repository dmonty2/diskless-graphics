#!/bin/sh
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.

# Author: Dean Montgomery
# Date: July 15, 2011
# Desc: bind mount rw folders into a tmpfs file system.  aufs was not working very well - /proc kept disappearing.
# Update May 30, 2012 added aufs again using specific folders to avoid the /proc bug.
# Update May 24, 2016 added squashfs and aufs closed source drivers.

case $1 in
prereqs)
    exit 0
    ;;
esac

. /scripts/functions

export dbm
export aufs
export xdriver="none"
export driver="none"
export nbdsquashserver=0
export nbdsquashusr=0
export nbdsquashopt=0
export usesquash=0
export death=0
export aufsdebug=0

export nvidia_pci_prefix="10de"

export nvidia_pci_361="06c0 06c4 06ca 06cd 06d1 06d2 06d8 06d9 06da 06dc 06dd 06de 06df 0dc0 0dc4 0dc5 0dc6 0dcd 0dce 0dd1 0dd2 0dd3 0dd6 0dd8 0dda 0de0 0de1 0de2 0de3 0de4 0de5 0de7 0de8 0de9 0dea 0deb 0dec 0ded 0dee 0def 0df0 0df1 0df2 0df3 0df4 0df5 0df6 0df7 0df8 0df9 0dfa 0dfc 0e22 0e23 0e24 0e30 0e31 0e3a 0e3b 0f00 0f01 0f02 0f03 0fc0 0fc1 0fc2 0fc6 0fc8 0fc9 0fcd 0fce 0fd1 0fd2 0fd3 0fd4 0fd5 0fd8 0fd9 0fdf 0fe0 0fe1 0fe2 0fe3 0fe4 0fe9 0fea 0fec 0fee 0fef 0ff2 0ff3 0ff6 0ff8 0ff9 0ffa 0ffb 0ffc 0ffd 0ffe 0fff 1001 1004 1005 1007 1008 100a 100c 1021 1022 1023 1024 1026 1027 1028 1029 102a 102d 103a 103c 1040 1042 1048 1049 104a 104b 104c 1050 1051 1052 1054 1055 1056 1057 1058 1059 105a 105b 107c 107d 1080 1081 1082 1084 1086 1087 1088 1089 108b 1091 1094 1096 109a 109b 1140 1180 1183 1184 1185 1187 1188 1189 118a 118e 118f 1193 1194 1195 1198 1199 119a 119d 119e 119f 11a0 11a1 11a2 11a3 11a7 11b4 11b6 11b7 11b8 11ba 11bc 11bd 11be 11bf 11c0 11c2 11c3 11c4 11c5 11c6 11c8 11cb 11e0 11e1 11e2 11e3 11fa 11fc 1200 1201 1203 1205 1206 1207 1208 1210 1211 1212 1213 1241 1243 1244 1245 1246 1247 1248 1249 124b 124d 1251 1280 1281 1282 1284 1286 1287 1288 1289 128b 1290 1291 1292 1293 1295 1296 1298 1299 129a 12b9 12ba 1340 1341 1344 1346 1347 1348 1349 134b 134d 134e 134f 137a 137d 1380 1381 1382 1390 1391 1392 1393 1398 1399 139a 139b 139c 13b0 13b1 13b2 13b3 13b9 13ba 13bb 13bc 13c0 13c2 13d7 13d8 13d9 13da 13f0 13f1 13f2 13f3 13f8 13f9 13fa 1401 1402 1407 1427 1431 1617 1618 1619 161a 1667 179c 17c2 17c8 17f0 17f1 17fd"

export nvidia_pci_340="0191 0193 0194 0197 019d 019e 0400 0401 0402 0403 0404 0405 0406 0407 0408 0409 040a 040b 040c 040d 040e 040f 0410 0420 0421 0422 0423 0424 0425 0426 0427 0428 0429 042a 042b 042c 042d 042e 042f 05e0 05e1 05e2 05e3 05e6 05e7 05ea 05eb 05ed 05f8 05f9 05fd 05fe 05ff 0600 0601 0602 0603 0604 0605 0606 0607 0608 0609 060a 060b 060c 060d 060f 0610 0611 0612 0613 0614 0615 0617 0618 0619 061a 061b 061c 061d 061e 061f 0621 0622 0623 0625 0626 0627 0628 062a 062b 062c 062d 062e 0630 0631 0632 0635 0637 0638 063a 0640 0641 0643 0644 0645 0646 0647 0648 0649 064a 064b 064c 0651 0652 0653 0654 0655 0656 0658 0659 065a 065b 065c 06e0 06e1 06e2 06e3 06e4 06e5 06e6 06e7 06e8 06e9 06ea 06eb 06ec 06ef 06f1 06f8 06f9 06fa 06fb 06fd 06ff 0840 0844 0845 0846 0847 0848 0849 084a 084b 084c 084d 084f 0860 0861 0862 0863 0864 0865 0866 0867 0868 0869 086a 086c 086d 086e 086f 0870 0871 0872 0873 0874 0876 087a 087d 087e 087f 08a0 08a2 08a3 08a4 08a5 0a20 0a22 0a23 0a26 0a27 0a28 0a29 0a2a 0a2b 0a2c 0a2d 0a32 0a34 0a35 0a38 0a3c 0a60 0a62 0a63 0a64 0a65 0a66 0a67 0a68 0a69 0a6a 0a6c 0a6e 0a6f 0a70 0a71 0a72 0a73 0a74 0a75 0a76 0a78 0a7a 0a7c 0ca0 0ca2 0ca3 0ca4 0ca5 0ca7 0ca8 0ca9 0cac 0caf 0cb0 0cb1 0cbc 10c0 10c3 10c5 10d8"

export nvidia_pci_304="0040 0041 0042 0043 0044 0045 0046 0047 0048 004e 0090 0091 0092 0093 0095 0098 0099 009d 00c0 00c1 00c2 00c3 00c8 00c9 00cc 00cd 00ce 00f1 00f2 00f3 00f4 00f5 00f6 00f8 00f9 0140 0141 0142 0143 0144 0145 0146 0147 0148 0149 014a 014c 014d 014e 014f 0160 0161 0162 0163 0164 0165 0166 0167 0168 0169 016a 01d0 01d1 01d2 01d3 01d6 01d7 01d8 01da 01db 01dc 01dd 01de 01df 0211 0212 0215 0218 0221 0222 0240 0241 0242 0244 0245 0247 0290 0291 0292 0293 0294 0295 0297 0298 0299 029a 029b 029c 029d 029e 029f 02e0 02e1 02e2 02e3 02e4 038b 0390 0391 0392 0393 0394 0395 0397 0398 0399 039c 039e 03d0 03d1 03d2 03d5 03d6 0531 0533 053a 053b 053e 07e0 07e1 07e2 07e3 07e5"

for x in $(cat /proc/cmdline); do
  case $x in
    root=*)
      ROOTNAME=${x#root=}
      ;;
    aufs=*)
      aufs=${x#aufs=}
      case $aufs in
        tmpfs-debug)
          aufs=tmpfs
          aufsdebug=1
          ;;
      esac
      ;;
    xdriver=*)
      xdriver=${x#xdriver=}
      ;;
    nbdsquashserver=*)
      nbdsquashserver=${x#nbdsquashserver=}
      usesquash=1
      ;;
    nbdsquashusr=*)
      nbdsquashusr=${x#nbdsquashusr=}
      ;;
    nbdsquashopt=*)
      nbdsquashopt=${x#nbdsquashopt=}
      ;;
  esac
done

# === union fs to tmpfs mounts ===
if [ "${aufs}" = "tmpfs" ]; then
  modprobe -q --use-blacklist aufs
  if [ $? -ne 0 ]; then
    echo    root-aufs error:      Failed to load aufs.ko
    exit 0
  fi


  #squashfs usr opt must be first so lower aufs nvidia and tmpfs mounts are on top.
  if [ "${usesquash}" -eq "1" ]; then
    modprobe nbd
    wait_for_udev
    /sbin/nbd-client ${nbdsquashserver} /dev/nbd1 -name ${nbdsquashusr} -persist 
    /sbin/nbd-client ${nbdsquashserver} /dev/nbd2 -name ${nbdsquashopt} -persist 
    echo deadline >/sys/block/nbd1/queue/scheduler
    echo deadline >/sys/block/nbd2/queue/scheduler
    mount -t squashfs -o ro /dev/nbd1 ${rootmnt}/usr
    mount -t squashfs -o ro /dev/nbd2 ${rootmnt}/opt
  fi 
 
  if [ ${xdriver} = "nvidia-304" -o ${xdriver} = "nvidia-340" -o ${xdriver} = "nvidia-361"  ]; then
    # command line force driver 
    driver=${xdriver};
  else
    # auto-detect nvidia PCI IDs.
    # Create a list of current devices
    awk '{print $2}' /proc/bus/pci/devices > /tmp/devices
    for pciid in ${nvidia_pci_304}; do 
      if grep -q ${nvidia_pci_prefix}${pciid} /tmp/devices; then
        driver="nvidia-304"
      fi
    done
    for pciid in ${nvidia_pci_340}; do 
      if grep -q ${nvidia_pci_prefix}${pciid} /tmp/devices; then
        driver="nvidia-340"
      fi
    done
    for pciid in ${nvidia_pci_361}; do 
      if grep -q ${nvidia_pci_prefix}${pciid} /tmp/devices; then
        driver="nvidia-361"
      fi
    done
  fi

  mkdir /rw
  mount -t tmpfs aufs-tmpfs /rw
  export hasvar="no"
  export hasetc="no"
  if [ "${driver}" != "none" ]; then
    cd ${rootmnt}/drivers/${driver}
    for d in `ls`; do
      mkdir -p /rw/${d}
      if [ "${d}" = "var" ]; then
        hasvar="yes"
      elif [ "${d}" = "etc" ]; then
        hasetc="yes"
      fi
      mount -t aufs -o dirs=/rw/${d}:${rootmnt}/drivers/${driver}/${d}=ro:${rootmnt}/${d}=ro aufs ${rootmnt}/${d}
    done
  fi
  # /etc/ and /var/ are required aufs - add if needed
  if [ "${hasvar}" = "no" ]; then
    d="var"
    mkdir -p /rw/${d}
    mount -t aufs -o dirs=/rw/${d}:${rootmnt}/${d}=ro aufs ${rootmnt}/${d}
  fi
   if [ "${hasetc}" = "no" ]; then
    d="etc"
    mkdir -p /rw/${d}
    mount -t aufs -o dirs=/rw/${d}:${rootmnt}/${d}=ro aufs ${rootmnt}/${d}
  fi

  # tmpfs file system is hidden on /rw
  mount --move /rw ${rootmnt}/rw
  if [ $? -ne 0 ]; then
    echo    root-aufs error:      Failed to move /rw ${rootmnt}/rw
    exit 0
  fi



  #*********** fix fstab on tmpfs ******************
  # test for /dev/sdx 
  # this is not on the real file system.  This is created on the tmpfs each time the system boots.
  # The init process will try to mount the root filesystem listed in fstab. / and swap must be removed.  
  # the root file system must be mounted on /ro not on /

  if [ "${aufsdebug}" -eq 1 ]; then
    echo  "   root-aufs debug:    Remove the root file system and swap from fstab "
    echo
    echo
    echo  "         ROOTNAME $ROOTNAME "
    echo  "         resume   $resume   "
    echo

  fi
  fstab1="  #
  #  RootAufs has mounted etc and var file system in ram
  #
  #  This fstab is in ram found under /rw
  #

  " 

  fstab2=$(cat ${rootmnt}/etc/fstab)
  echo "${fstab1}${fstab2}" > ${rootmnt}/etc/fstab
  if [ $? -ne 0 ]; then
    echo    root-aufs error:      Failed to create /aufs/etc/fstab
    #exit 0
  fi
fi

exit 0
